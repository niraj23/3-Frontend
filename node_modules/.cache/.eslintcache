[{"/Users/nirajpatel/Desktop/phase-3-frontend/src/index.js":"1","/Users/nirajpatel/Desktop/phase-3-frontend/src/App.js":"2","/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Home/NavBar.js":"3","/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Login/Login.js":"4","/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Devs/Dev.js":"5","/Users/nirajpatel/Desktop/phase-3-frontend/src/components/User/NewUserForm.js":"6","/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Login/Loading.js":"7","/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Popular/PopTrack.js":"8","/Users/nirajpatel/Desktop/phase-3-frontend/src/components/User/UserProfile.js":"9","/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Playlist/Playlist.js":"10","/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Home/Home.js":"11","/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Devs/DevCard.js":"12","/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Popular/Popular.js":"13","/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Playlist/PlaylistForm.js":"14","/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Playlist/PlaylistCard.js":"15","/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Search/Search.js":"16","/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Search/SearchedSongs.js":"17","/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Playlist/AddToPlaylistForm.js":"18","/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Playlist/PlaylistTrack.js":"19","/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Christmas/ChristmasTrack.js":"20","/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Christmas/Christmas.js":"21"},{"size":394,"mtime":1639087750298,"results":"22","hashOfConfig":"23"},{"size":10877,"mtime":1639104655029,"results":"24","hashOfConfig":"23"},{"size":1662,"mtime":1639104404641,"results":"25","hashOfConfig":"23"},{"size":1702,"mtime":1639106204343,"results":"26","hashOfConfig":"23"},{"size":1116,"mtime":1639087750279,"results":"27","hashOfConfig":"23"},{"size":1836,"mtime":1639106177400,"results":"28","hashOfConfig":"23"},{"size":244,"mtime":1639105668613,"results":"29","hashOfConfig":"23"},{"size":617,"mtime":1639102826234,"results":"30","hashOfConfig":"23"},{"size":2211,"mtime":1639105993934,"results":"31","hashOfConfig":"23"},{"size":1240,"mtime":1639105873203,"results":"32","hashOfConfig":"23"},{"size":1407,"mtime":1639105414931,"results":"33","hashOfConfig":"23"},{"size":1134,"mtime":1639087750282,"results":"34","hashOfConfig":"23"},{"size":1644,"mtime":1639100675429,"results":"35","hashOfConfig":"23"},{"size":1033,"mtime":1639107180656,"results":"36","hashOfConfig":"23"},{"size":1405,"mtime":1639107112371,"results":"37","hashOfConfig":"23"},{"size":615,"mtime":1639093150606,"results":"38","hashOfConfig":"23"},{"size":2077,"mtime":1639124187701,"results":"39","hashOfConfig":"23"},{"size":764,"mtime":1639087906569,"results":"40","hashOfConfig":"23"},{"size":1033,"mtime":1639106919076,"results":"41","hashOfConfig":"23"},{"size":1071,"mtime":1639105472433,"results":"42","hashOfConfig":"23"},{"size":1649,"mtime":1639104498492,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bpbdvg",{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nirajpatel/Desktop/phase-3-frontend/src/index.js",[],"/Users/nirajpatel/Desktop/phase-3-frontend/src/App.js",["87"],"import React, { Component } from 'react';\nimport './App.css';\nimport {Route, Switch, withRouter} from 'react-router-dom';\nimport NavBar from './components/Home/NavBar'\nimport NewUserForm from './components/User/NewUserForm';\nimport Login from './components/Login/Login';\nimport PopTrack from './components/Popular/PopTrack';\nimport ChristmasTrack from './components/Christmas/ChristmasTrack';\nimport Playlist from './components/Playlist/Playlist';\nimport UserProfile from './components/User/UserProfile';\nimport Home from './components/Home/Home';\nimport Loading from './components/Login/Loading'\nimport Dev from './components/Devs/Dev'\n\n\n\nclass App extends Component {\n  _isMounted = false;\n\n  state={\n    topHits: [],\n    userList: [],\n    random: [],\n    isLoading: true,\n    user: {},\n    login: false,\n    playlist: [],\n    searchedSongs: [],\n    loading: false,\n    tracks: [],\n    playlistTracks: [],\n  }\n\n  componentDidMount(){\n    this._isMounted = true;\n    if (this._isMounted) {\n      this.setState({isLoading: false})\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  getTopHits(){\n    //change address depending on port\n    fetch('http://localhost:3001/api/v1/tracks/top_100', {\n      headers: {\n        Authorization: localStorage.getItem(\"token\")\n      }\n    }).then(res=>res.json())\n      .then(data => {\n        if (this._isMounted) {\n          this.setState({\n            isLoading: false,\n            topHits: data\n          })\n        }\n      })\n  }\n\n  getChristmas(){\n    //change address depending on port\n    fetch('http://localhost:3001/api/v1/tracks/random', {\n      headers: {\n        Authorization: localStorage.getItem(\"token\")}\n      })\n      .then(res=>res.json())\n      .then(data => {\n        if (this._isMounted) {\n          this.setState({\n            isLoading: false,\n            random: data\n          })\n        }\n        })\n  }\n\n  getUserList(){\n    fetch('http://localhost:3001/api/v1/users')\n      .then(res=>res.json())\n      .then(data=> {\n        this.setState({\n          userList: data\n        })\n      })\n  }\n\n  getTracks = () => {\n    fetch('http://localhost:3001/api/v1/tracks', {\n      headers: {\n        Authorization: localStorage.getItem(\"token\")\n      }\n    }).then(res => res.json())\n    .then(data => {\n      this.setState({\n        tracks: data\n      })\n    })\n  }\n\n  loginSubmitHandler = (userInfo) => {\n    fetch('http://localhost:3001/api/v1/login', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Action: \"application/json\",\n      },\n      body: JSON.stringify({\n        username: userInfo.username,\n        password: userInfo.password\n      })\n    }).then(res=>res.json())\n      .then(data => {\n        localStorage.setItem(\"token\", data.jwt)\n        this.setState({\n          user: data.user,\n          login: true\n        })\n        this.props.history.push(\"/home\")\n        this.getChristmas()\n        this.getTopHits()\n        this.getPlaylist(data.user.id)\n        this.getTracks()\n        this.getPlaylistTracks()\n      })\n  }\n\n\n    newUserSubmitHandler = (event, userInfo) => {\n      event.preventDefault()\n      let token = localStorage.getItem(\"token\")\n      fetch('http://localhost:3001/api/v1/users', {\n       method: \"POST\",\n       headers: {\n         \"Content-Type\": \"application/json\",\n         Accept: \"application/json\",\n       },\n       body: JSON.stringify({\n         name: userInfo.name,\n         username: userInfo.username,\n         password: userInfo.password,\n       })\n     }).then(res=>res.json())\n        .then(data=>{\n          localStorage.setItem(\"token\", data.jwt)\n          this.setState({\n            user: data.user,\n            login: true\n          })\n          this.props.history.push(\"/home\")\n          this.getChristmas()\n          this.getTopHits()\n          this.getPlaylist(data.user.id)\n          this.getTracks()\n          this.getPlaylistTracks()\n        })\n\n    }\n\n    logout = () => {\n      localStorage.removeItem(\"token\")\n      this.setState({\n        user: {},\n        login: false\n      })\n      this.props.history.push(\"/home\")\n    }\n\n\n\n    submitPlaylistHandler= (e, playlistId, track, spotifyId) => {\n      e.preventDefault()\n      fetch(`http://localhost:3001/api/v1/playlist_tracks`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: localStorage.getItem(\"token\")\n        },\n        body: JSON.stringify({\n          playlist_id: playlistId,\n          track_id: track.id,\n          spotify_id: spotifyId\n        })\n      }).then(res=>res.json())\n        .then(data=>{\n          let fullPlaylist = [...this.state.playlistTracks, data]\n          let newTrack = {\n            id: data.track_id,\n            name: track.name,\n            artists: track.artists,\n            image: track.image,\n            duration: track.duration,\n            popularity: track.popularity,\n            preview: track.preview,\n            spotify_id: track.spotify_id\n          }\n          this.setState({\n            playlistTracks: fullPlaylist,\n            tracks: [...this.state.tracks, newTrack]\n          })\n        }).then(alert(`${track.name} added!`))\n    }\n\n    getPlaylist = (id) => {\n      fetch(`http://localhost:3001/api/v1/users/${id}/playlists`, {\n        headers: {\n          Authorization: localStorage.getItem(\"token\")\n        }\n      })\n    .then(res=>res.json())\n    .then(data => {\n      let newPl = [...data].filter(pl => pl.user_id === id)\n      this.setState({\n        playlist: newPl\n      })\n    })\n    }\n\n    getPlaylistTracks = () => {\n      fetch(`http://localhost:3001/api/v1/playlist_tracks`, {\n        headers: {\n          Authorization: localStorage.getItem(\"token\")\n        }\n      })\n    .then(res=>res.json())\n    .then(data => {\n      this.setState({\n        playlistTracks: data\n      })\n    })\n    }\n\n\n    editSubmitHandler = (e, userInfo) => {\n      e.preventDefault()\n      let id = this.state.user.id\n      console.log(id);\n      fetch(`http://localhost:3001/api/v1/users/${id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: localStorage.getItem(\"token\")\n        },\n        body: JSON.stringify({\n          name: userInfo.name,\n          username: userInfo.username,\n          password: this.state.user.password\n        })\n      })\n    }\n\n    deleteUser = () => {\n      let id = this.state.user.id\n        fetch(`http://localhost:3001/api/v1/users/${id}`, {\n          method: \"DELETE\",\n          headers: {\n            Authorization: localStorage.getItem(\"token\")\n          }\n        }).then(this.logout())\n    }\n\n    fetchSearchedSongs = (query) => {\n      this.setState({loading: true})\n      fetch(`http://localhost:3001/api/v1/tracks/search?q=${query}`, {\n        method: \"GET\",\n        headers: {\n          Authorization: localStorage.getItem(\"token\")\n        }\n      })\n      .then(r => r.json())\n      .then(data => {\n        this.setState({\n          searchedSongs: data,\n          loading: false\n        })\n      })\n    }\n\n    createNewPlaylist = (e, playlist) => {\n      e.preventDefault()\n      //console.log(playlist)\n      fetch(`http://localhost:3001/api/v1/users/${playlist.userId}/playlists`, {\n       method: \"POST\",\n       headers: {\n         \"Content-Type\": \"application/json\",\n         Accept: \"application/json\",\n         Authorization: localStorage.getItem(\"token\")\n       },\n       body: JSON.stringify({\n         name: playlist.name,\n         user_id: playlist.userId\n       })})\n       .then(res => res.json())\n       .then(data => {\n         let playlist = [...this.state.playlist, data]\n         this.setState({\n           playlist\n         })\n       })\n       .then(alert(`${playlist.name} created!`))\n    }\n\n    // addToPlaylist = (track) => {\n    //   let newPlaylist = [...this.state.playlist, track]\n    //   this.setState({\n    //     playlist: newPlaylist\n    //   })\n    //   alert(`${track.name} added!`)\n    // }\n    //\n    // removeSong = (trackObj) => {\n    //   let newPlaylist = [...this.state.playlist].filter(track => track !== trackObj)\n    //   this.setState({playlist: newPlaylist})\n    // }\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n      <NavBar\n        login={this.state.login}\n        logout={this.logout}\n        />\n      <Switch>\n\n      <Route\n        path=\"/playlist\"\n        render={()=> (\n          <Playlist\n            userInfo={this.state.user}\n            createNewPlaylist={this.createNewPlaylist}\n            playlist={this.state.playlist}\n            removeSong={this.removeSong}\n            tracks={this.state.tracks}\n            playlistTracks={this.state.playlistTracks}\n          />\n        )} />\n\n        <Route\n          path=\"/popular\"\n          render={()=> (\n            this.state.topHits.length === 0?\n            <Loading /> :\n            <PopTrack\n              topHits={this.state.topHits}\n              addToPlaylist={this.submitPlaylistHandler}\n              playlist={this.state.playlist}\n              />\n            )}\n            />\n\n        <Route\n          path=\"/christmas\"\n          render={()=> (\n            this.state.random.length === 0?\n              <Loading /> :\n              <ChristmasTrack\n                random={this.state.random}\n                addToPlaylist={this.submitPlaylistHandler}\n                playlist={this.state.playlist}\n                />\n            )}\n            />\n\n        <Route\n          path=\"/profile\"\n          render={()=>(\n            <UserProfile\n              userInfo={this.state.user}\n              editSubmitHandler={this.editSubmitHandler}\n              deleteUser={this.deleteUser}\n             />\n          )}\n          />\n\n        <Route\n          path=\"/signup\"\n          render={()=>(\n            <NewUserForm\n              newUserSubmitHandler={this.newUserSubmitHandler}\n              />\n          )}\n        />\n\n        <Route\n          path=\"/login\"\n          render={()=> (\n            <Login\n              loginSubmitHandler={this.loginSubmitHandler}\n              userInfo={this.state.user}\n              />\n            )}\n            />\n\n        <Route\n          path=\"/home\"\n          render={()=> (\n            <Home\n              fetchSearchedSongs={this.fetchSearchedSongs}\n              searchedSongs={this.state.searchedSongs}\n              login={this.state.login}\n              loading={this.state.loading}\n              addToPlaylist={this.submitPlaylistHandler}\n              playlist={this.state.playlist}\n            />\n          )}\n          />\n\n        <Route\n          path=\"/\"\n          component={Home}\n          />\n        \n        <Route \n        path=\"/devs\" \n         component={Dev} \n        /> \n\n\n      </Switch>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Home/NavBar.js",[],"/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Login/Login.js",[],"/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Devs/Dev.js",[],"/Users/nirajpatel/Desktop/phase-3-frontend/src/components/User/NewUserForm.js",[],"/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Login/Loading.js",[],"/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Popular/PopTrack.js",[],"/Users/nirajpatel/Desktop/phase-3-frontend/src/components/User/UserProfile.js",[],"/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Playlist/Playlist.js",[],"/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Home/Home.js",[],"/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Devs/DevCard.js",[],"/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Popular/Popular.js",[],"/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Playlist/PlaylistForm.js",[],"/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Playlist/PlaylistCard.js",[],"/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Search/Search.js",[],"/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Search/SearchedSongs.js",[],"/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Playlist/AddToPlaylistForm.js",[],"/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Playlist/PlaylistTrack.js",[],"/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Christmas/ChristmasTrack.js",[],"/Users/nirajpatel/Desktop/phase-3-frontend/src/components/Christmas/Christmas.js",[],{"ruleId":"88","severity":1,"message":"89","line":132,"column":11,"nodeType":"90","messageId":"91","endLine":132,"endColumn":16},"no-unused-vars","'token' is assigned a value but never used.","Identifier","unusedVar"]